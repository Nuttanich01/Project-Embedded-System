/*Base register adddress header file*/
#include "stm32l1xx.h"
/*Library related header files*/
#include "stm32l1xx_ll_gpio.h"
#include "stm32l1xx_ll_pwr.h"
#include "stm32l1xx_ll_rcc.h"
#include "stm32l1xx_ll_bus.h"
#include "stm32l1xx_ll_utils.h"
#include "stm32l1xx_ll_system.h"
#include "stm32l1xx_ll_tim.h"
#include "stm32l1xx_ll_exti.h"

void SystemClock_Config(void);
//ultrasonic
void TIMx_IC_Config(void)
{
		LL_GPIO_InitTypeDef timic_gpio;
		LL_TIM_InitTypeDef timbase;
		LL_TIM_IC_InitTypeDef timic;
		
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
		
		timic_gpio.Mode = LL_GPIO_MODE_ALTERNATE;
		timic_gpio.Pull = LL_GPIO_PULL_DOWN;
		timic_gpio.Pin = LL_GPIO_PIN_1 | LL_GPIO_PIN_3;
		timic_gpio.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
		timic_gpio.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
		timic_gpio.Alternate = LL_GPIO_AF_1;
		LL_GPIO_Init(GPIOA, &timic_gpio);
		
		LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
		
		//TIM_IC Configure CH1
		timic.ICActiveInput = LL_TIM_ACTIVEINPUT_DIRECTTI;
		timic.ICFilter = LL_TIM_IC_FILTER_FDIV1;
		timic.ICPolarity = LL_TIM_IC_POLARITY_RISING;
		timic.ICPrescaler = LL_TIM_ICPSC_DIV1;
		LL_TIM_IC_Init(TIM2, LL_TIM_CHANNEL_CH2, &timic);
		
		//TIM_IC Configure CH4
		timic.ICPolarity = LL_TIM_IC_POLARITY_FALLING;
		LL_TIM_IC_Init(TIM2, LL_TIM_CHANNEL_CH4, &timic);
		
		NVIC_SetPriority(TIM2_IRQn, 0);
		NVIC_EnableIRQ(TIM2_IRQn);
		
		LL_TIM_EnableIT_CC2(TIM2);
		LL_TIM_EnableIT_CC4(TIM2);
		
		LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);
		LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH4);
		
		LL_TIM_EnableCounter(TIM2);
}

void GPIO_Config(void)
{
		LL_GPIO_InitTypeDef timic_gpio;
		
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
		
		timic_gpio.Mode = LL_GPIO_MODE_OUTPUT;
		timic_gpio.Pull = LL_GPIO_PULL_NO;
		timic_gpio.Pin = LL_GPIO_PIN_2;
		timic_gpio.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
		timic_gpio.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
		LL_GPIO_Init(GPIOA, &timic_gpio);
	
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
}

uint16_t uwIC1 = 0;
uint16_t uwIC2 = 0;
uint16_t uwDiff = 0;
uint16_t uhICIndex = 0;
uint8_t state = 0;
float period = 0;
float distance = 0;
float temp=0;

//soil moiisture
void TIMBase_Config(void);
long map(long,long,long,long,long);

uint16_t adc_data = 0;
uint16_t map_value = 0;
uint16_t cnt = 0;

//temp
#include "dwt_delay.h"

/*already implemented */
void SystemClock_Config(void);
void OW_WriteBit(uint8_t d);
uint8_t OW_ReadBit(void);
void DS1820_GPIO_Configure(void);
uint8_t DS1820_ResetPulse(void);

/*haven't been implemented yet!*/
void OW_Master(void);
void OW_Slave(void);
void OW_WriteByte(uint8_t data);
uint16_t OW_ReadByte(void);

uint16_t temp1,temp2;
float temp_cal;

//show value
	uint32_t seg[10] = {LL_GPIO_PIN_2| LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14,
										LL_GPIO_PIN_10| LL_GPIO_PIN_11,
										LL_GPIO_PIN_2| LL_GPIO_PIN_10|LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_15,
										LL_GPIO_PIN_2| LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_15,
										LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_14|LL_GPIO_PIN_15,
										LL_GPIO_PIN_2| LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_14|LL_GPIO_PIN_15,
										LL_GPIO_PIN_2| LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15,
										LL_GPIO_PIN_2| LL_GPIO_PIN_10|LL_GPIO_PIN_11,
										LL_GPIO_PIN_2| LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15,
										LL_GPIO_PIN_2| LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_14|LL_GPIO_PIN_15}; //0-9 
	uint32_t CAb[3] = {LL_GPIO_PIN_2| LL_GPIO_PIN_12| LL_GPIO_PIN_13| LL_GPIO_PIN_14,
										LL_GPIO_PIN_2| LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15,
										LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15}; // 0 = C; 1 = A; 2 = b;
	uint32_t digit[4] = {LL_GPIO_PIN_0,LL_GPIO_PIN_1,LL_GPIO_PIN_2,LL_GPIO_PIN_3};
  void show_temp();
	void show_soilMoiisture();
	void show_water();
	
	//switch
	int count_bnt = 0;
	int pump = 0 ;
	uint16_t btn_pump = 0;
	int count_pump = 0;
	
int main()
{
	//pump
		
	//ultrasonic
		uint32_t TIM2CLK;
		uint32_t PSC;
		uint32_t IC1PSC;
	
		SystemClock_Config();
		GPIO_Config();
		TIMx_IC_Config();
	
	//7seg
	LL_GPIO_InitTypeDef ltc4727_init;
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
	
	ltc4727_init.Mode = LL_GPIO_MODE_OUTPUT;
	ltc4727_init.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	ltc4727_init.Pull = LL_GPIO_PULL_NO;
	ltc4727_init.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	ltc4727_init.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
	LL_GPIO_Init(GPIOB, &ltc4727_init);
	
	ltc4727_init.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
	LL_GPIO_Init(GPIOC, &ltc4727_init);
	
	//temp
	DWT_Init();
	DS1820_GPIO_Configure();
	
	//soil moiisture
	TIMBase_Config();
	
	RCC->AHBENR |= (1<<0);
	GPIOA->MODER |= (3<<10);
	RCC->CR |= (1<<0);
	RCC->APB2ENR |= (1<<9);
		
	ADC1->CR1 |= (1<<24)| (1<<11);
	ADC1->CR1 &= ~(7<<13);
	ADC1->CR2 &= ~(1<<11);
	ADC1->SMPR3 |= (2<<15);
	ADC1->SQR5 |= (5<<0);
	ADC1->CR2 |= (1<<0);
	
	//switch
	LL_GPIO_InitTypeDef GPIO_Init, GPIO_Init2, Relay;
	LL_EXTI_InitTypeDef EXTI_A0 , EXTI_B3; //Create EXTI object name EXTI_A0
	
	GPIO_Init.Mode = LL_GPIO_MODE_INPUT;
	GPIO_Init.Pin = LL_GPIO_PIN_0;
	GPIO_Init.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_Init.Pull = LL_GPIO_PULL_NO;
	GPIO_Init.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	LL_GPIO_Init(GPIOA, &GPIO_Init);
	
	GPIO_Init2.Mode = LL_GPIO_MODE_INPUT;
	GPIO_Init2.Pin = LL_GPIO_PIN_2;
	GPIO_Init2.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_Init2.Pull = LL_GPIO_PULL_NO;
	GPIO_Init2.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	LL_GPIO_Init(GPIOD, &GPIO_Init2);
	
	LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_0);//Enable interrupt at EXTI Line 0
	EXTI_A0.Line_0_31 = LL_EXTI_LINE_0 ;//Set EXTI line of object at EXTI Line 0
	EXTI_A0.Mode = LL_EXTI_MODE_IT ;//Set mode to interrupt 
	EXTI_A0.Trigger = LL_EXTI_TRIGGER_RISING ;//Set trigger at rising edge
	EXTI_A0.LineCommand = ENABLE ;//Enable interrupt API
	LL_EXTI_Init(&EXTI_A0);//Assign the EXTI object to hardware EXTI
	NVIC_EnableIRQ((IRQn_Type)6);	

		
	/*LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_2);//Enable interrupt at EXTI Line 1
	EXTI_B3.Line_0_31 = LL_EXTI_LINE_2 ;//Set EXTI line of object at EXTI Line 1
	EXTI_B3.Mode = LL_EXTI_MODE_IT ;//Set mode to interrupt 
	EXTI_B3.Trigger = LL_EXTI_TRIGGER_RISING ;//Set trigger at rising edge
	EXTI_B3.LineCommand = ENABLE ;//Enable interrupt API
	LL_EXTI_Init(&EXTI_B3);//Assign the EXTI object to hardware EXTI
	NVIC_EnableIRQ((IRQn_Type)8);*/
	
	//Pump
	Relay.Mode = LL_GPIO_MODE_OUTPUT;
  Relay.Pin = LL_GPIO_PIN_10;
  Relay.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  Relay.Pull = LL_GPIO_PULL_NO;
	Relay.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	LL_GPIO_Init(GPIOC, &Relay);
	
		while(1)
		{
			btn_pump = LL_GPIO_IsInputPinSet(GPIOD, LL_GPIO_PIN_2);
			if(btn_pump == 1){
				count_pump = (count_pump+1)%2;
			}
			if(count_pump == 1){
            LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_10);
            }
        else{

            LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_10);
        }
			switch(state)
			{
				case 0:
					//Trigger measurement
					LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_2);
					LL_mDelay(1);
					LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
					state = 1;
				break;
				
				case 1:
					//Measure uptime using TIM_IC, if uhIndex == 2, rising and falling duration is measured
					if(uhICIndex == 1)
					{
							//Period calculation
							PSC = LL_TIM_GetPrescaler(TIM2) + 1;
							TIM2CLK = SystemCoreClock / PSC;
							IC1PSC = __LL_TIM_GET_ICPSC_RATIO(LL_TIM_IC_GetPrescaler(TIM2, LL_TIM_CHANNEL_CH1));
							
							period = (uwDiff*(PSC) * 1.0) / (TIM2CLK *IC1PSC * 1.0); //calculate uptime period
							distance = ((period * 340) / 2) *100 ; //centimet unit
							uhICIndex = 0;
							state = 0;
					}
				break;
			}
		//7seg show value
		switch (count_bnt){
			case 1:
					show_soilMoiisture();
				break;
			case 2:
					show_water();
				break;
			default:
					show_temp();
				break;
		}
	
		//soil moiisture
		cnt = LL_TIM_GetCounter(TIM2);

		if(cnt >= 2999){
			ADC1->CR2 |= (1<<30);
			while((ADC1->SR & (1<<1)) == 0);
			adc_data = ADC1->DR;
			map_value =map(adc_data,1023,0,0,100);
			LL_TIM_SetCounter(TIM3, 0);
		}
			
			//temp
		DS1820_ResetPulse(); //Send reset pulse
		OW_WriteByte(0xCC); //Send 'Skip Rom (0xCC)' command
		OW_WriteByte(0x44); //Send 'Temp Convert (0x44)' command
		LL_mDelay(200); //Delay at least 200ms (typical conversion time)
		DS1820_ResetPulse(); //Send reset pulse
		OW_WriteByte(0xCC); //Send 'Skip Rom (0xCC)' command
		OW_WriteByte(0xBE);//Send 'Read Scractpad (0xBE)' command
		
		temp1 = OW_ReadByte();//Read byte 1 (Temperature data in LSB)
		temp2 = OW_ReadByte();//Read byte 2 (Temperature data in MSB)
		
		//Convert to readable floating point temperature
		temp = (temp2<<8)|temp1;
		temp_cal = (temp*1.0) / 16.0;
	}
}
void EXTI0_IRQHandler(){
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0)){
			count_bnt = (count_bnt+1)%3;
		LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
    }
}
/*void EXTI2_IRQHandler(){
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2)){
			pump = (pump+1)%2;
		LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
    }
}*/

void show_temp(){
		int temp_0 = (int)temp_cal/100;
		int temp_1 = (int)temp_cal/10;
		int temp_2 = (int)temp_cal%10;
		uint8_t j[4] = {temp_0,temp_1,temp_2,0};
		for(int i = 0; i < 4; i++){
			LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3);
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_2|LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15);
			if(i==3){
			LL_GPIO_SetOutputPin(GPIOC, digit[3]);
			LL_GPIO_SetOutputPin(GPIOB, CAb[0]);
			}
			else{			
			LL_GPIO_SetOutputPin(GPIOC, digit[i]);
			LL_GPIO_SetOutputPin(GPIOB, seg[j[i]]);
			}
			LL_mDelay(200);
			}
}
void show_soilMoiisture(){
		int soil0 = map_value/100;
		int soil1 = map_value/10;
		int soil2 = map_value%10;
		uint8_t j[4] = {0,soil0,soil1,soil2};
		for(int i = 0; i < 4; i++){
			LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3);
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_2|LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15);
			if(i==0){
			LL_GPIO_SetOutputPin(GPIOC, digit[0]);
			LL_GPIO_SetOutputPin(GPIOB, CAb[1]);
			}
			else{			
			LL_GPIO_SetOutputPin(GPIOC, digit[i]);
			LL_GPIO_SetOutputPin(GPIOB, seg[j[i]]);
			}
			LL_mDelay(200);
			}
}
void show_water(){
		int water0 = distance/100;
		int water1 = distance/10;
		int water2 = (int)distance%10;
		uint8_t j[4] = {0,water0,water1,water2};
		for(int i = 0; i < 4; i++){
			LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3);
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_2|LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15);
			if(i==0){
			LL_GPIO_SetOutputPin(GPIOC, digit[0]);
			LL_GPIO_SetOutputPin(GPIOB, CAb[2]);
			}
			else{			
			LL_GPIO_SetOutputPin(GPIOC, digit[i]);
			LL_GPIO_SetOutputPin(GPIOB, seg[j[i]]);
			}
			LL_mDelay(200);
			}
}

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void TIMBase_Config(void){
	LL_TIM_InitTypeDef timbase_initstructure;
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
	timbase_initstructure.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
	timbase_initstructure.CounterMode = LL_TIM_COUNTERMODE_UP;
	timbase_initstructure.Autoreload = 3000- 1;
	timbase_initstructure.Prescaler =  32000 - 1;
	
	LL_TIM_Init(TIM3, &timbase_initstructure);
	LL_TIM_EnableCounter(TIM3);
}

void TIM2_IRQHandler(void)
{	  
	
		if(LL_TIM_IsActiveFlag_CC2(TIM2) == SET)
		{
				//Detect rising edge
				uwIC1 = LL_TIM_IC_GetCaptureCH2(TIM2);
				LL_TIM_ClearFlag_CC2(TIM2);	
		}
		if(LL_TIM_IsActiveFlag_CC4(TIM2) == SET)
		{
				uwIC2 = LL_TIM_IC_GetCaptureCH4(TIM2);
				
				if(uwIC2 > uwIC1)
				{
					uwDiff = uwIC2 - uwIC1;
				}
				else if(uwIC2 < uwIC1)
				{
					uwDiff = ((LL_TIM_GetAutoReload(TIM2) - uwIC1) + uwIC2) + 1;
				}
				uhICIndex = 1;
				LL_TIM_ClearFlag_CC4(TIM2);
		}
}

void SystemClock_Config(void)
{
  /* Enable ACC64 access and set FLASH latency */ 
  LL_FLASH_Enable64bitAccess();; 
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);

  /* Set Voltage scale1 as MCU will run at 32MHz */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
  
  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (LL_PWR_IsActiveFlag_VOSF() != 0)
  {
  };
  
  /* Enable HSI if not already activated*/
  if (LL_RCC_HSI_IsReady() == 0)
  {
    /* HSI configuration and activation */
    LL_RCC_HSI_Enable();
    while(LL_RCC_HSI_IsReady() != 1)
    {
    };
  }
  
	
  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_6, LL_RCC_PLL_DIV_3);

  LL_RCC_PLL_Enable();
  while(LL_RCC_PLL_IsReady() != 1)
  {
  };
  
  /* Sysclk activation on the main PLL */
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
  {
  };
  
  /* Set APB1 & APB2 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);

  /* Set systick to 1ms in using frequency set to 32MHz                             */
  /* This frequency can be calculated through LL RCC macro                          */
  /* ex: __LL_RCC_CALC_PLLCLK_FREQ (HSI_VALUE, LL_RCC_PLL_MUL_6, LL_RCC_PLL_DIV_3); */
  LL_Init1msTick(32000000);
  
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(32000000);
}

//temp
void OW_WriteBit(uint8_t d)
{
	if(d == 1) //Write 1
	{
		OW_Master(); //uC occupies wire bus
		LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
		DWT_Delay(1);
		OW_Slave(); //uC releases wire bus
		DWT_Delay(60);
	}
	else //Write 0
	{
		OW_Master(); //uC occupies wire bus
		LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
		DWT_Delay(60);
		OW_Slave(); //uC releases wire bus
	}
}

uint8_t OW_ReadBit(void)
{
	OW_Master();
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
	DWT_Delay(2);
	OW_Slave();
	
	return LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_6);	
}

void DS1820_GPIO_Configure(void)
{
	LL_GPIO_InitTypeDef ds1820_io;
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
	
	ds1820_io.Mode = LL_GPIO_MODE_OUTPUT;
	ds1820_io.Pin = LL_GPIO_PIN_6;
	ds1820_io.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	ds1820_io.Pull = LL_GPIO_PULL_NO;
	ds1820_io.Speed = LL_GPIO_SPEED_FREQ_LOW;
	LL_GPIO_Init(GPIOB, &ds1820_io);
}

uint8_t DS1820_ResetPulse(void)
{	
	OW_Master();
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
	DWT_Delay(480);
	OW_Slave();
	DWT_Delay(80);
	
	if(LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_6) == 0)
	{
		DWT_Delay(200);
		return 0;
	}
	else
	{
		DWT_Delay(200);
		return 1;
	}
}
void OW_Master(void){
	LL_GPIO_InitTypeDef ds1820_io;
	
	ds1820_io.Mode = LL_GPIO_MODE_OUTPUT;
	ds1820_io.Pin = LL_GPIO_PIN_6;
	ds1820_io.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	ds1820_io.Pull = LL_GPIO_PULL_NO;
	ds1820_io.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	LL_GPIO_Init(GPIOB, &ds1820_io);
}

void OW_Slave(void){
	LL_GPIO_InitTypeDef ds1820_io;
	
	ds1820_io.Mode = LL_GPIO_MODE_INPUT;
	ds1820_io.Pin = LL_GPIO_PIN_6;
	ds1820_io.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	ds1820_io.Pull = LL_GPIO_PULL_NO;
	ds1820_io.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	LL_GPIO_Init(GPIOB, &ds1820_io);
}

void OW_WriteByte(uint8_t data){
	uint8_t i,temp;
	
	OW_Master();		//The data line is configured as output
	for(i = 0; i < 8; i++)
	{
	    if ((data & (1<<i))!=0){
				OW_WriteBit(1);
			}else{
				OW_WriteBit(0);
			}
	}
}

uint16_t OW_ReadByte(void){
	uint16_t value=0;
	
	for (int i=0;i<8;i++)
	{
		if(LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_6))  // if the pin is HIGH
		{
			value |= OW_ReadBit()<<i;  // read = 1
		}
		DWT_Delay(60);  // wait for 60 us
	}
	return value;
}
